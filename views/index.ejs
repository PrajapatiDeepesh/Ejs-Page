<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <!-- Left Navigation (Dynamic Links) -->
    <nav class="sidebar">
        <ul>
            <% navLinks.forEach(link => { %>
                <li><a href="<%= link.url %>"><%= link.name %></a></li>
            <% }); %>
        </ul>
    </nav>

    <!-- Main Content -->
    <div class="content">
        <h1><%= title %></h1>
        <p>Welcome to the <%= title %> section of the application.</p>

        <!-- MQTT Connection Status -->
        <p id="mqtt-status">Connecting to MQTT...</p>

        <!-- Bar Chart -->
        <canvas id="myChart"></canvas>

        <!-- Grid Layout (Table) -->
        <h2>Information Table</h2>
        <table class="grid-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Age</th>
                    <th>Role</th>
                </tr>
            </thead>
            <tbody>
                <% gridData.forEach(row => { %>
                    <tr>
                        <td><%= row.id %></td>
                        <td><%= row.name %></td>
                        <td><%= row.age %></td>
                        <td><%= row.role %></td>
                    </tr>
                <% }) %>
            </tbody>
        </table>

        <!-- Form to Add New Entry -->
        <h2>Add New Entry</h2>
        <table class="grid-table form-table">
            <form action="/add-entry" method="POST">
                <tr>
                    <td><input type="number" name="id" required placeholder="Enter ID"></td>
                    <td><input type="text" name="name" required placeholder="Enter Name"></td>
                    <td><input type="number" name="age" required placeholder="Enter Age"></td>
                    <td><input type="text" name="role" required placeholder="Enter Role"></td>
                    <td><input type="submit" value="Add Entry"></td>
                </tr>
            </form>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
    <script>
        // MQTT Connection
        const mqttClient = mqtt.connect('mqtt://broker.hivemq.com'); // Replace with your broker URL

        mqttClient.on('connect', () => {
            document.getElementById('mqtt-status').textContent = 'MQTT connected';
            console.log('MQTT connected');
            mqttClient.subscribe('chart/data');
        });

        mqttClient.on('message', (topic, message) => {
            if (topic === 'chart/data') {
                const data = JSON.parse(message.toString());
                updateChart(data);
            }
        });

        function updateChart(data) {
            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                    datasets: [{
                        label: '# of Votes',
                        data: data, // MQTT data here
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Fetch initial data from the API to populate the chart on load
        fetch('/api/chart-data')
            .then(response => response.json())
            .then(data => {
                updateChart(data);
            })
            .catch(error => console.error('Error fetching initial chart data:', error));
    </script>
</body>
</html>
